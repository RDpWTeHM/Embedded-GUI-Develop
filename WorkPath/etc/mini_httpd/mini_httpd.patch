#!/usr/bin/python3

"""
# filename: mini_httpd.patch
# Author  : Joseph Lin
# E-mail  : joseph.lin@aliyun.com
#
#
### ----- 2018/Jul/22 12:30
### v0.0.1
### function: hard-code 路径，使用 jinja2 修改字符串
###
### ------ 2018/Jul/22 13:20
### v0.0.2
### change log: 默认打开的 mini_httpd.conf.jinja2 和 本脚本在同级目录，
###             获取 本脚本 所在的 绝对路径。 (merge r380 solution.)
###
### ------
###
"""


### 
### import packages
### 
import os, sys

import jinja2
from jinja2 import Environment, PackageLoader, select_autoescape
from jinja2 import Template


###
### Globale variables
###
doDebug = False


# 209 build-in function error
# 210 command error
# 219 IO Error
# 1   common error
# -1  func error
# 911 bad error
#

###
### function define
### 
def getCMDPath( argv0 ):
	sindex = 0
	if argv0[0] == '.' and argv0[1] == '/':
		sindex = 2
	else:
		pass
	
	pareseCMDRet = ""
	tmpStr = "" 
	programName = ""
	point = 0
	while True:
		point = len(pareseCMDRet) + 1
		try:
			(tmpStr, programName) = argv0[(sindex + point-1):].split('/', 1)
		except:
			tmpStr = ""
			programName = argv0[(sindex + point-1):]

		if tmpStr != "":
			pareseCMDRet = pareseCMDRet + '/'
			programName = ""
		else:
			break
		pareseCMDRet = pareseCMDRet + tmpStr		
	return (pareseCMDRet, programName)


configJinja2Name = "mini_httpd.conf.jinja2"
configName       = "mini_httpd.conf"
def main():
	if doDebug:
		print ("running main(): \n", file=sys.stderr)
		print ("cwd: %s" %os.getcwd(), file=sys.stderr )

	programName = ""
	CMDPath = ""
	(CMDPath, programName) = getCMDPath(sys.argv[0])
	if doDebug:
		print("\n\nCMD path: {}\nprogram Name: {}\n".format(CMDPath, programName), file=sys.stderr)

	configJinja2Path = os.getcwd()+CMDPath

	### get WorkPath path
	workPath = configJinja2Path
	# workPath = "anytesersdf2308as/s/adjfh/dsjlf" ## test "else"
	workPathIndex=workPath.find("WorkPath")
	if workPathIndex!=-1:
		workPath = workPath[0:workPathIndex+len("WorkPath")]
	else:
		print("!!!!  get WorkPath fail!!!!!\n", file=sys.stderr)
		sys.exit(911)

	conf_fp = None
	conf_data = ""
	try:
		with open(configJinja2Path+"/"+configJinja2Name, 'r') as conf_fp:
			conf_data = conf_fp.read() 
	except IOError as e:
		print ( "\noperate mini_httpd.conf.jinja2 file fail!", file=sys.stderr )
		print ( "error with: %s " %str(e), file=sys.stderr)
		sys.exit(219)


	rootRelativePath = "var/www"
	cgiRelateRootPath = "cgi-bin"
	pidRelativePath = "var"
	logRelativePath = "var/log"

	### replace variable of *.conf
	template = Template( conf_data )
	dstConfData = template.render( 
					var_mini_httpd_root= workPath+"/"+rootRelativePath,
					var_mini_httpd_cgi_path = cgiRelateRootPath,
					var_mini_httpd_pid_path = workPath+"/"+pidRelativePath,
					var_mini_httpd_log_path = workPath+"/"+logRelativePath )

	if doDebug:
		print ( "dstConfData: \n%s" %dstConfData, file=sys.stderr )

	try:
		with open(configJinja2Path+"/"+configName, 'w') as mini_httpd_fp:
			print ( "%s" %dstConfData, file=mini_httpd_fp )
	except IOError as e:
		print ( "\noperate mini_httpd.conf file fail!", file=sys.stderr )
		print ( "error with: %s " %str(e), file=sys.stderr)
		sys.exit(219)

	sys.exit(0)
#end main.

if __name__ == '__main__':
	main()
#fi.

